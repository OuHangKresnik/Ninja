apply plugin: 'java'

version = '0.1'
jar {
    manifest {
        attributes('Version': version,
                   'Built-By': 'ouhang',
                   'Implementation-Title': 'Gradle')
    }
}

repositories {
    mavenCentral() // Use Maven Central Reponstory: search.maven.org
}

configurations {
    antlr4 {
         description = 'ANTLR4'
    }
}

dependencies {
    compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5.1-1'
    antlr4 group: 'org.antlr', name: 'antlr4', version: '4.5.1-1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

ext.antlr = [
    grammarPackage: 'ouhang.decisionmodel.antlr',
    sourceDir: 'src/antlr',
    destinationDir: 'src-generated/antlr'
]

sourceSets.main.java.srcDirs += antlr.destinationDir // Add generated files into java sources

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generate Java sources from ANTLR4 grammar files.'
    inputs.dir file(antlr.sourceDir)
    outputs.dir file(antlr.destinationDir)
    
    def grammars = fileTree(dir: antlr.sourceDir, include: '**/*.g4')
    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = ['-o', "${antlr.destinationDir}", // Specify output directory
            '-visitor',                      // Generate visitor for parser
            '-package', antlr.grammarPackage,
            grammars.files].flatten()
}

compileJava {
    dependsOn generateGrammarSource
    //source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}
